/*
 * Copyright 2017 CodiLime
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";
package veles.network;

// This is very "hackish" temporary protobuf definiton, for schema before refactoring

message ChunkDataItem {
    message RepackFormat {
      uint32 endian = 1;
      uint32 width = 2;
      uint32 high_pad = 3;
      uint32 low_pad = 4;
    }

    message FieldHighType {
      uint32 mode = 1;
      int32 shift = 2;
      uint32 sign_mode = 3;
      uint32 float_mode = 4;
      bool float_complex = 5;
      uint32 string_mode = 6;
      uint32 string_encoding = 7;
      string type_name = 8;
    }

    message BinData {
      uint32 width = 1;
      uint64 size = 2;
      bytes data = 3;
    }
    uint32 type = 1;
    uint64 start = 2;
    uint64 end = 3;
    string name = 4;
    RepackFormat repack = 5;
    uint64 num_elements = 6;
    FieldHighType high_type = 7;
    BinData raw_value = 8;
}

message LocalObject {
    uint64 id = 1;
    string name = 2;
    string comment = 3;
    repeated LocalObject children = 4;
    uint64 type = 5;

    string file_blob_path = 101;

    uint64 chunk_start = 201;
    uint64 chunk_end = 202;
    string chunk_type = 203;
    repeated ChunkDataItem items = 204;
}

message Request {
    enum Operation {
      LIST_CHILDREN = 0;
      LIST_CHILDREN_RECURSIVE = 1;
      ADD_CHILD_CHUNK = 2;
      DELETE_OBJECT = 3;
      GET_BLOB_DATA = 4;
      ADD_CHUNK_ITEM = 5;
    }
    Operation type = 1;
    // full path to object we want to operate on
    // (i.e. if we want to delete chunk with id 3 in file with id 2 it would be [2,3])
    // this is just a temporary hack to enable semi efficent state-less comunication
    // w/o random access to objects on server side
    repeated uint64 id = 2;
    oneof request_body {
      LocalObject object = 101;
      ChunkDataItem chunk_item = 102;
    }
}

message Response {
    bool ok = 1;
    string error_msg = 2;
    repeated LocalObject results = 3;
}
